# Advent of Code (AoC) - day 21, task 1
import "prelude.eg" import "os.ego" import "regex.ego" import "generator.eg" import "dictionary.eg"
using System using OS using List using Dict

data s, cube
def input = let L = read_line stdin in if eof stdin then nil else cons L input
val number = Regex::compile "-?[0-9]+"
val onoroff = Regex::compile "on|off"
def parse_line = [ L ->
    let C = ([{X0,X1,Y0,Y1,Z0,Z1} -> 
        cube (s X0 (X1+1)) (s Y0 (Y1+1)) (s Z0 (Z1+1))] . map to_int . Regex::matches number) L in
    let O = ([{O} -> O] . Regex::matches onoroff) L in (O, C) ]

def s_overlap = [ (s X0 X1) (s Y0 Y1) -> max X0 Y0 < min X1 Y1 ]
def s_truncate = 
    [ (s X0 X1) (s Y0 Y1) -> [(s X0 X1) -> if X1 <= X0 then none else (s X0 X1)]
        (s (max X0 Y0) (min X1 Y1)) ]
def s_length = [ (s X0 X1) -> X1 - X0 ]
def s_split = [(s X0 Y0) (s X1 Y1) ->
    let XX = nub (sort {X0,Y0,X1,Y1}) in map [(X,Y) -> s X Y] (zip XX (tail XX)) ]

def cube_maybe = [ none _ _ -> none | _ none _ -> none | _ _ none -> none | X Y Z -> cube X Y Z ]
def cube_volume = [ (cube S0 S1 S2) -> s_length S0 * s_length S1 * s_length S2 ]
def cube_truncate = 
    [ (cube S0 S1 S2) (cube S3 S4 S5) ->
         cube_maybe  (s_truncate S0 S3) (s_truncate S1 S4) (s_truncate S2 S5) ]
def cube_overlap = 
    [(cube S0 S1 S2) (cube S3 S4 S5) ->
        s_overlap S0 S3 && [_ -> s_overlap S1 S4 && [_ -> s_overlap S2 S5]] ]
def cube_split = 
    [(cube S0 S1 S2) (cube S3 S4 S5) ->
        range3 (s_split S0 S3) (s_split S1 S4) (s_split S2 S5) [S0 S1 S2 -> cube S0 S1 S2] ]

def cube_subs =
    [ C0 C1 -> if not (cube_overlap C0 C1) then {C1} else
        filter [C2 -> not (cube_overlap C0 C2) && [_ -> cube_overlap C1 C2 ]] (cube_split C0 C1) ]

def solve = 
    [ {} -> 0 | {("off", C)|CC} -> solve CC
    | {("on",  C)|CC} -> let CC1 = foldl [CC C -> (flatten . map (cube_subs C)) CC] {C} (map snd CC) in 
        (sum (map cube_volume CC1)) + solve CC ]
        
def main = 
    let PP = map parse_line input in solve PP
