# Advent of Code (AoC) - day 1, task 1

import "prelude.eg"
import "os.ego"
import "regex.ego"
import "map.eg"

using System
using OS
using List

def input =
    let L = read_line stdin in
    if eof stdin then nil else cons L input

val digits = Regex::compile "[abcdefg]+"
val bar = Regex::compile "\\|"

def map_tuple =
    [ F (X,Y) -> (F X, F Y) ]

def parse_line = 
    [ L -> 
        let {L,R} = Regex::split bar L in
        let F = map (pack . sort . unpack) . Regex::matches digits in
           map_tuple F (L,R) ]    

val zero_to_nine = map unpack
     {"abcefg", "cf", "acdeg", "acdfg", "bcdf", 
      "abdfg", "abdefg", "acf", "abcdefg", "abcdfg" }

def perms =
    let LL = unpack "abcdefg" in
    (map (zip LL) . permutations) LL

def perm_maps =
    map (Map::nth . Map::from_list) perms

# precompute all permutation maps
val zero_to_nine_maps =
    map
    [ F -> let LL = map (pack . sort . map F) zero_to_nine in 
            (Map::from_list . zip LL) (from_to 0 9) ]
    perm_maps

def match_entry =
    [ F LL -> all (Map::has F) LL ]

def find_match =
    [ {F|FF} LL -> if match_entry F LL then F else find_match FF LL ]

def entry_to_number =
    [ (LL, RR) -> let F = find_match zero_to_nine_maps LL in foldl [X Y -> X*10 + Y] 0 (map (Map::nth F) RR) ]

def main =
    let LL = map parse_line input in 
    foldl (+) 0 (map entry_to_number LL)
