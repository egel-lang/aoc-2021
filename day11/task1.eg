# Advent of Code (AoC) - day 11, task 1

import "prelude.eg"
import "os.ego"
import "regex.ego"
import "generator.eg"
import "dictionary.eg"

using System
using OS
using List

def input = let L = read_line stdin in if eof stdin then nil else cons L input
val digit = Regex::compile "[0-9]"
def parse_line = map to_int . Regex::matches digit   

def to_board =
   Gen::to_lists . Gen::zip_2d Gen::space . Gen::from_lists

def stencil = Dict::from_list . List::flatten

def print_board = 
    [ B -> let KK = Dict::keys B in 
        foldl [(X0,Y0) (X1,Y1) -> (if not (X0 == X1) then print "\n" else none);
               print (Dict::get B (X1, Y1)); (X1,Y1) ] (head KK) KK; none ]

val update_stencil =
    (stencil . List::map (List::map [((X,Y),V) -> ((X - 1, Y - 1), V)]) . to_board)
    {{1, 1, 1}, {1, 0- 100, 1}, {1, 1, 1}}

def increase_octopodes =
    [ F -> foldl [F (X,Y) -> Dict::set F (X,Y) (Dict::get F (X,Y) + 1)] F (Dict::keys F) ]

val flash_counter = ref 0
def flash_get     = get_ref flash_counter
def flash_inc     = set_ref flash_counter (flash_get + 1)

def flash_octopus = [ F O -> flash_inc; apply_mask F O ]

def apply_mask =
    [ F (X0, Y0) ->
        foldl
        [ U (X1,Y1) -> 
            let (X2, Y2) = (X0+X1, Y0+Y1) in
            if Dict::has F (X2,Y2) then Dict::set F (X2, Y2) ((Dict::get F (X2, Y2)) + (Dict::get update_stencil (X1,Y1))) else F ]
        F
        (Dict::keys update_stencil) ]
 
def find_flash =
    [ F -> foldl [O0 O1 -> if 10 <= (Dict::get F O1) then O1 else O0] none (Dict::keys F) ]

def flash_octopodes =
    [ F -> [ none -> F | O -> flash_octopus F O; flash_octopodes F ] (find_flash F) ] 

def unflash_octopodes =
    [ F -> foldl [F O -> if Dict::get F O < 0 then Dict::set F O 0 else F ] F (Dict::keys F) ]

def debug =
    [ F ->
        print "flash: " flash_get "\n"; print_board F (0,0) (10, 10); print "\n" ]

def next =
    [ F ->  increase_octopodes F; 
            flash_octopodes F;
            unflash_octopodes F;
            debug F; F ]

def iter = [ F 0 X -> X | F N X -> iter F (N - 1) (F X) ]

def main =
    let LL = map parse_line input in 
    let F  = (stencil . to_board) LL in
        iter next 100 F; flash_get
