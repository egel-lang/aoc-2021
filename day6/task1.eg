# Advent of Code (AoC) - day 6, task 2

import "prelude.eg"
import "os.ego"
import "regex.ego"

using System
using OS
using List

def input = read_line stdin

val number = Regex::compile "[0-9]+" 

def parse_line = [ L -> map to_int (Regex::matches number L) ]

def insert =
    [ F0 N0 {} -> {(F0, N0)}
    | F0 N0 {(F1, N1) | FF} ->
        if (F0 == F1) then {(F0, N0+N1) | FF}
        else {(F1, N1) | insert F0 N0 FF} ]

def compact = foldl [FF (F,N) -> insert F N FF] nil

def update = [ 0 -> 6 | N -> N - 1 ]

def day =
    [ FF -> 
        let (ZZ,FF) = split [(F, _) -> F == 0 ] FF in
        compact ((map [(_,N) -> (8,N)] ZZ) ++ (map [(F,N) -> (update F, N)] (ZZ ++ FF))) ]

def main =
    let II = parse_line input in
    let FF = foldl [FF F -> insert F 1 FF] nil II in
        foldl [M (_,N) -> N+M] 0 (iter 80 day FF)
