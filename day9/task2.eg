# Advent of Code (AoC) - day 9, task 2

import "prelude.eg"
import "os.ego"
import "regex.ego"
import "dict.ego"

using System
using OS
using List

def min = [ X Y -> if X < Y then X else Y ]

def input =
    let L = read_line stdin in
    if eof stdin then nil else cons L input

val digit = Regex::compile "[0-9]"

def parse_line = map to_int . Regex::matches digit   

def coordinate_pairs =
    snd .
    foldl [((X,Y),LL) -> foldl [((X,Y),L) Z -> ((X,Y+1),{((X,Y),Z)|L})] ((X+1,0),LL)] 
          ((-1,0),nil) 

def stencil =
    foldl [D (K,V) -> dict_set D K V] dict

def adjacent =
    [ F (X,Y) -> filter (dict_has F) {(X - 1,Y),(X + 1,Y),(X,Y - 1), (X,Y + 1)} ]

def is_low =
    [ F (X,Y) -> (dict_get F) (X,Y) < (foldl min 10 . map (dict_get F) . adjacent F) (X,Y) ]

def minima =
    [ F -> filter (is_low F) (dict_keys F)]

def visited =
    [ D -> foldl [D K -> dict_set D K false] dict (dict_keys D) ]

def flood =
    [ F V nil -> V
    | F V {(X,Y)|XX} ->
        if (dict_get V (X,Y)) || [_ -> dict_get F (X,Y) == 9] then flood F V XX else
        dict_set V (X,Y) true;
        let MIN = (foldl min 10 . map (dict_get F)) {(X,Y)| adjacent F (X,Y)} in
        dict_set F (X,Y) MIN;
        flood F V (adjacent F (X,Y) ++ XX) ]
        
def basin_size =
    [ B -> foldl [N P -> if dict_get B P then N+1 else N] 0 (dict_keys B) ]

def main =
    let LL = map parse_line input in 
    let CC = coordinate_pairs LL in
    let F  = stencil CC in
    let BB = map [MM -> (flood F (visited F) . [X -> {X}]) MM] (minima F) in
        (foldl (*) 1 . take 3 . reverse . sort) (map basin_size BB)

