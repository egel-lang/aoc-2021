# Advent of Code (AoC) - day 14, task 2

import "prelude.eg"
import "os.ego"
import "regex.ego"
import "dictionary.eg"
import "generator.eg"
using System
using OS
using List

def min = foldl [X Y -> if X < Y then X else Y] 10000000000000
def max = foldl [X Y -> if X < Y then Y else X] 0
def Dict::add  = [ D K N -> Dict::set D K (Dict::nth 0 D K + N) ]

def input = let L = read_line stdin in if eof stdin then nil else cons L input

val template = Regex::compile "[A-Z]+" 
val insert   = Regex::compile "([A-Z]+) -> ([A-Z])" 
def parse_line = [ L -> let {A,B} = Regex::group insert L in 
                        (([{A,B} -> (A,B)] . unpack) A, (head . unpack) B)]
def parse = [ LL -> ((unpack.head) LL, (map parse_line.tail.tail) LL) ]

def bucket_empty = Dict::dict
def buckets      = Dict::keys 
def bucket_nth   = Dict::nth 0
def bucket_add   = Dict::add

def template_to_bucket =
    [ BB {} -> BB | BB {A} -> BB 
    | BB {A,B|CC} -> template_to_bucket (bucket_add BB (A,B) 1) {B|CC} ]

def expand = 
    [ F FROM -> 
        foldl [TO (A,B) ->
        if Dict::has F (A,B) then 
            let C = Dict::get F (A,B) in let N = bucket_nth FROM (A,B) in
            bucket_add TO (A,C) N; bucket_add TO (C,B) N; TO
        else bucket_add TO (A,B) (bucket_nth FROM (A,B)) ]
        bucket_empty (buckets FROM) ]

def elements =
    Dict::keys . Dict::from_list . map [X -> (X,0)] . flatten . map [((A,B),C) -> {A,B,C}]
    
def template_length =
    ((+) 1 . (foldl [N (P,M) -> N+M] 0) . Dict::to_list)

def count_dict =
    [ BB -> foldl [D ((A,B),N) -> Dict::add D B N; D] Dict::dict (Dict::to_list BB) ]

def main =
    let (T,EE) = parse input in 
    let EL = elements EE in
    let BB = template_to_bucket bucket_empty T in
    let BB = iter 40 (expand (Dict::from_list EE)) BB in
    let NN = (map [(_,N) -> N] . Dict::to_list . [D -> Dict::add D (head T) 1] . count_dict) BB in
        (max NN) - (min NN)
