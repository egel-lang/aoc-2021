# Advent of Code (AoC) - day 10, task 1

import "prelude.eg"
import "os.ego"
import "regex.ego"
import "dict.ego"

using System
using OS
using List

def input =
    let L = read_line stdin in
    if eof stdin then nil else cons L input

val paren = Regex::compile "[<>\\(\\)\\[\\]\\{\\}]"

def parse_line = (map (head . unpack)) . (Regex::matches paren)   

val group = {('[', ']'), ('<', '>'), ('(', ')'), ('{','}')}

def look = [ nil -> none | {I|II} -> I ]

def skip = [ nil -> throw "panic" | {I|II} -> II ]

def force =
    [ C II -> if C == look II then skip II else throw (C, II) ]
    
data branch

def parse_enclosed =
    [ (O,C) II -> 
        let II = force O II in let (TT, II) = parse_pairs II in let II = force C II in
            (branch O TT C, II) ]

def parse_pair =
    [ nil II  -> throw "panic"
    | {(O,C)|PP} II -> 
        if O == look II then 
            parse_enclosed (O,C) II
        else parse_pair PP II ]

def parse_pairs =
    [ II  -> 
        if elem (look II) (map fst group) then
            let (T, II) = parse_pair group II in 
            let (TT, II) = parse_pairs II in (cons T TT, II) 
        else ({}, II) ]

data result, error

def process_line =
    [ II -> try [(TT, nil) -> result TT| (TT, II) -> throw (none, II) ] (parse_pairs II)
            catch [ (E, II) -> error E (look II) ] ]

def score =
    [ (error _ ')') -> 3
    | (error _ ']') -> 57
    | (error _ '}') -> 1197
    | (error _ '>') -> 25137 ]

def main =
    let LL = map parse_line input in
    let LL = map process_line LL in
       (foldl (+) 0 . map score . filter [(error _ none) -> false | (error _ _) -> true | _ -> false ]) LL
