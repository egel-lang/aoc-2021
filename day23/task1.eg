# Advent of Code (AoC) - day 23, task 1
import "prelude.eg" import "os.ego" import "regex.ego" import "generator.eg" import "dictionary.eg" import "pqueue.ego"
using System using OS using List

def print_board = 
    [ B -> let KK = Dict::keys B in 
        foldl [(X0,Y0) (X1,Y1) -> (if not (X0 == X1) then print "\n" else none);
               print (Dict::get B (X1, Y1)); (X1,Y1) ] (head KK) KK; print "\n" ]

# input
def input = let L = read_line stdin in if eof stdin then nil else cons L input

val cell = Regex::compile "[A-D\\.# ]"

def parse_line = map ([{C}->C] . unpack) . Regex::matches cell   

def board   = Dict::from_list . flatten . Gen::to_lists . Gen::zip_2d Gen::space . Gen::from_lists

def is_amphipod = [ 'A' -> true | 'B' -> true | 'C' -> true | 'D' -> true | _ -> false ]

def info = [ 'A' -> ('A',1,3) | 'B' -> ('B',10,5) | 'C' -> ('C',100,7) | 'D' -> ('D',1000,9) ]

def start = map [(C,A) -> (C,info A)] . filter [(C,A) -> is_amphipod A] . Dict::to_list

# hard code the board
def graph_add_edge =
    [ D (E0,E1) -> if Dict::has D E0 then Dict::set D E0 {E1| Dict::get D E0} else Dict::set D E0 {E1} ]

def graph_from_list = foldl [G E -> graph_add_edge G E] Dict::dict

val hall_way = map [N -> (1,N)] {1,2,4,6,8,10,11} 

val destinations = (flatten . map [N -> {(2,N),(3,N)}]) {3,5,7,9}

val edges = range2 destinations hall_way tuple ++ range2 hall_way destinations tuple

val graph = graph_from_list edges

def graph_get = Dict::get graph

# valid moves
def between =
    [ X Y Z -> if Z < Y then between X Z Y else (Y <= X) && [_ -> X <= Z] ]

def blocked = 
    [ B ((X0,Y0),_) ((1,Y1),_) ->
        let EE = map [(E,A) -> E] B in
        let HH = filter [(1,Y) -> true|_ -> false] EE in
        let B0 = foldl [B (_,Y) -> B || [_ -> between Y Y0 Y1 ]] false HH in
        let RR = filter [(X,Y) -> Y == Y0] EE in
        let B1 = foldl [B (X,Y) -> B || [_ -> between X 1 X0 ]] false RR in
            or B0 B1
    | B ((1,Y0),_) ((X1,Y1),_) -> 
        let EE = map [(E,A) -> E] B in
        let HH = filter [(1,Y) -> true|_ -> false] EE in
        let B0 = foldl [B (_,Y) -> B || [_ -> between Y Y0 Y1 ]] false HH in
        let RR = filter [(X,Y) -> Y == Y1] EE in
        let B1 = foldl [B (X,Y) -> B || [_ -> between X 1 X1 ]] false RR in
            or B0 B1 ]

def invalid_destination =
    [ B ((1,_),_) ((1,_),_) -> true
    | B ((1,F),_) ((X0,Y0),(_,_,Y1)) ->
        if Y0 == Y1 then
            let B = filter [((_,Y),_) -> Y == Y0] B in
            (any [((_,Y0),(_,_,Y1)) -> not (Y0 == Y1)] B) 
            ||
            [_ -> let XX = map [((X,_),_) -> X] B in
                  #print XX;
                  not (X0 == (minimum {4|XX} - 1)) ]
        else true
    | B _ _ -> false ]

def invalid_source =
    [ B ((X0,Y0),(A1,F1,Y1)) _ ->
        if Y0 == Y1 then
            let AA = filter [((X,Y),A) -> Y == Y0 ] B in
            let AA = filter [((X,Y),A) -> X0 < X ] AA in
                all [(_,(A,_,_)) -> A == A1 ] AA
        else false ]

def valid_move =
    [ B AP0 AP1 ->
             not (blocked B AP0 AP1 
                        || [_-> invalid_destination B AP0 AP1 
                        || [_-> invalid_source B AP0 AP1]]) ]

# move cost
def move_cost =
    [ ((X0,Y0),(_,F,_)) ((X1,Y1),_) -> F * (abs (X0-X1) + abs (Y0-Y1)) ]
    
# generate all next boards with cost to move
def board_next = [ B -> 
    let BB = flatten ( range B [(V0,A0) ->
        let B = filter [A -> not (A == (V0,A0))] B in
        let MM = map [V -> (V,A0)] (graph_get V0) in
        let MM = filter [A -> valid_move B (V0,A0) A] MM in
        let BB = map [A -> (move_cost (V0, A0) A, {A|B})] MM in 
            BB ]  )
    in #print (BB) "<<\n";
        BB ]

def board_end = all [((_,Y0),(_,_,Y1)) -> Y0 == Y1 ]

# counter
val count = ref 0
def counter = [ _ -> 
        let N = get_ref count in
        set_ref count (N+1); N ]

val visited = Dict::dict
def visited_has = [ B -> Dict::has visited B ]
def visited_add = [ B -> Dict::set visited B true ]
def visited_del = [ B -> Dict::erase visited B ]

# search
def find_run = 
    [ T PQ -> 
        if pqueue_empty PQ then throw "search exhausted" else 
        let (T, B) = pqueue_top PQ in
        pqueue_pop PQ;
        if visited_has B then find_run T PQ else
        visited_add B;
        #print " => " (counter none) "\n";
        print " -> " T "\n";
        if board_end B then T else
        #debug B;
        let BB = board_next B in
        let PQ = foldl [PQ (C,B) -> pqueue_push PQ (T+C) (sort B) ] PQ BB in 
            find_run T PQ ]

def find =
    [ B -> find_run 0 (pqueue_push pqueue 0 (sort B)) ]

def debug =
    [ B ->
        let SP = (flatten . Gen::to_lists) (Gen::take_2d 5 13 Gen::space) in
        let SP = map [C -> (C, '.')] SP in
        let B = map [(C,(A,_,_)) -> (C,A)] B in
        let D = Dict::from_list (SP ++ B) in
            print_board D; print "\n" ]

# wrap it up
def main =
    let B = (sort . start . board . map parse_line) input in
        find B

